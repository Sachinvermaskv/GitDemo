<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic Tac Toe</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            background-color: #f4f4f4;
            margin: 0;
            padding: 0;
        }

        h1 {
            margin-top: 20px;
        }

        #game-board {
            display: grid;
            grid-template-columns: repeat(3, 100px);
            grid-template-rows: repeat(3, 100px);
            gap: 5px;
            margin: 20px auto;
            width: 310px;
        }

        .cell {
            width: 100px;
            height: 100px;
            background-color: #fff;
            border: 2px solid #333;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2rem;
            cursor: pointer;
        }

        .cell.taken {
            cursor: not-allowed;
        }

        #status {
            margin-top: 20px;
            font-size: 1.2rem;
        }

        #reset {
            margin-top: 20px;
            padding: 10px 20px;
            font-size: 1rem;
            cursor: pointer;
            background-color: #007BFF;
            color: white;
            border: none;
            border-radius: 5px;
        }

        #reset:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>
    <h1>Tic Tac Toe</h1>
    <div id="game-board">
        <!-- Cells will be generated dynamically -->
    </div>
    <div id="status">Player X's turn</div>
    <button id="reset">Reset Game</button>

    <script>
        const board = document.getElementById('game-board');
        const status = document.getElementById('status');
        const resetButton = document.getElementById('reset');

        let currentPlayer = 'X';
        let gameActive = true;
        let gameState = ["", "", "", "", "", "", "", "", ""];

        const winningConditions = [
            [0, 1, 2],
            [3, 4, 5],
            [6, 7, 8],
            [0, 3, 6],
            [1, 4, 7],
            [2, 5, 8],
            [0, 4, 8],
            [2, 4, 6]
        ];

        function handleCellClick(event) {
            const cell = event.target;
            const cellIndex = cell.getAttribute('data-index');

            if (gameState[cellIndex] !== "" || !gameActive) {
                return;
            }

            gameState[cellIndex] = currentPlayer;
            cell.textContent = currentPlayer;
            cell.classList.add('taken');

            if (checkWin()) {
                status.textContent = `Player ${currentPlayer} wins!`;
                gameActive = false;
                return;
            }

            if (gameState.every(cell => cell !== "")) {
                status.textContent = "It's a tie!";
                gameActive = false;
                return;
            }

            currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
            status.textContent = `Player ${currentPlayer}'s turn`;
        }

        function checkWin() {
            return winningConditions.some(condition => {
                const [a, b, c] = condition;
                return gameState[a] && gameState[a] === gameState[b] && gameState[a] === gameState[c];
            });
        }

        function resetGame() {
            currentPlayer = 'X';
            gameActive = true;
            gameState = ["", "", "", "", "", "", "", "", ""];
            status.textContent = `Player ${currentPlayer}'s turn`;
            board.innerHTML = "";
            createBoard();
        }

        function createBoard() {
            for (let i = 0; i < 9; i++) {
                const cell = document.createElement('div');
                cell.classList.add('cell');
                cell.setAttribute('data-index', i);
                cell.addEventListener('click', handleCellClick);
                board.appendChild(cell);
            }
        }

        resetButton.addEventListener('click', resetGame);

        createBoard();
    </script>
</body>
</html>
